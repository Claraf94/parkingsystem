/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package distsys.smartparking;

import grpc.generated.TicketPayment.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import java.util.logging.Logger;
import io.grpc.stub.StreamObserver;
import java.util.UUID;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author dell
 */
public class TicketPaymentGUI extends javax.swing.JFrame {
    private static final Logger logger = Logger.getLogger(TicketPaymentGUI.class.getName());
    // a non-blocking stub to make an asynchronous call
    private TicketPaymentServiceGrpc.TicketPaymentServiceStub asyncStub;
    private ManagedChannel channel;
    private StreamObserver<TicketPaymentRequest> requestObserver;
    //creating an arrayList to process multiple payments
    ArrayList<TicketPaymentRequest> pendingPayment = new ArrayList<TicketPaymentRequest>();
    double remaining = 0;
    
    /**
     * Creates new form TicketPaymentGUI
     */
    public TicketPaymentGUI() {
        initComponents();
       //initializing the GUI interface with a random value to be paid 
        double min = 10;
                double max = 100;
                double price = min + Math.random() * (max - min);
                price = Math.round(price * 100.0) / 100.0;
                totalAmount.setText("" + price);
                remaining = price;
                remainingAmount.setText("" + remaining);
                
        //gRPC channel settings
        channel = ManagedChannelBuilder
				.forAddress("localhost", 50051)
				.usePlaintext()
				.build();
        asyncStub = TicketPaymentServiceGrpc.newStub(channel);		
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        paymentType = new javax.swing.JComboBox<>();
        totalAmount = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        paymentValue = new javax.swing.JTextField();
        processPayment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        paymentDetails = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        remainingAmount = new javax.swing.JTextField();

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Payment type:");

        jLabel2.setText("Total:");

        paymentType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Card", "Cash", "Voucher" }));
        paymentType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTypeActionPerformed(evt);
            }
        });

        totalAmount.setEditable(false);
        totalAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountActionPerformed(evt);
            }
        });

        jLabel3.setText("Payment Value:");

        paymentValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentValueActionPerformed(evt);
            }
        });

        processPayment.setText("Process Payment");
        processPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processPaymentActionPerformed(evt);
            }
        });

        paymentDetails.setColumns(20);
        paymentDetails.setRows(5);
        jScrollPane1.setViewportView(paymentDetails);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Payment details:");

        jLabel6.setText("Remaining: ");

        remainingAmount.setEditable(false);
        remainingAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remainingAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paymentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paymentValue, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remainingAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(paymentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(paymentValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processPayment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(remainingAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void paymentTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentTypeActionPerformed
        //no need to implement
    }//GEN-LAST:event_paymentTypeActionPerformed

    private void totalAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountActionPerformed
        //when the GUI starts, a random amount to be paid will be generated 
    }//GEN-LAST:event_totalAmountActionPerformed

    private void paymentValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentValueActionPerformed
        processPaymentActionPerformed(evt);
    }//GEN-LAST:event_paymentValueActionPerformed

    private void processPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processPaymentActionPerformed
        String payment;
        double paid;
            
        try{
            //taking the option payment
            payment = paymentType.getSelectedItem().toString();
            paid = Double.parseDouble(paymentValue.getText());
            
            //in case the payment value inserted is less than 0 or equal to 0
            if(paid <= 0){
                paymentDetails.setText("Value to be paid needs to be more than 0.");
                return;
            }
            
            //when cash payment is more than the amount to be paid
            //in case the amount inserted is more than the price to be charged,
            //need to calculate the change 
            if(payment.equals("Cash") && paid > remaining){
                double change = paid - remaining;
                change = ((int)(change * 100)) /100.0;
                
                pendingPayment.add(TicketPaymentRequest.newBuilder()
                .setPaymentType(payment)
                .setAmount(remaining)
                .setPaymentID(UUID.randomUUID().toString())
                .build());
                
                //shows the partial payment
                paymentDetails.append("Paid €" + paid + " by " + payment + "\n");
                //shows change due
                paymentDetails.append("Change: €" + change + "\n");
                paymentDetails.append("Payment done.");
                
                //reseting the variables
                paymentValue.setText("");
                totalAmount.setText("");
                remaining = 0;
                return;
            }
            
            
            //when paying by card or voucher
             pendingPayment.add(TicketPaymentRequest.newBuilder()
            .setPaymentType(payment)
            .setAmount(paid)
            .setPaymentID(UUID.randomUUID().toString())
            .build());

            remaining= remaining - paid;
            remaining = ((int) (remaining * 100)) / 100.0;
            remainingAmount.setText("" + remaining);
            
            //shows partial payment
            paymentDetails.append("Paid €" + paid + " by " + payment + "\n");

            if (remaining == 0) {
                paymentDetails.append("Payment done.");
                totalAmount.setText("");
            } 
            
            //reset the amount
            paymentValue.setText("");
        }catch(Exception e){
            paymentDetails.setText("Error: " + e.getMessage());
        }
  
    }//GEN-LAST:event_processPaymentActionPerformed

    private void remainingAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remainingAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remainingAmountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketPaymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketPaymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketPaymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketPaymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketPaymentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea paymentDetails;
    private javax.swing.JComboBox<String> paymentType;
    private javax.swing.JTextField paymentValue;
    private javax.swing.JButton processPayment;
    private javax.swing.JTextField remainingAmount;
    private javax.swing.JTextField totalAmount;
    // End of variables declaration//GEN-END:variables
}
